@###############################################
@#
@# ROS message struct code generation for C++
@#
@# EmPy template for generating <msg>.h files
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - spec (rosidl_parser.MessageSpecification)
@#    Parsed specification of the .msg file
@###############################################

@{
from rosidl_generator_cpp import escape_string
from rosidl_generator_cpp import msg_type_to_cpp
from rosidl_generator_cpp import MSG_TYPE_TO_CPP
from rosidl_generator_cpp import value_to_cpp

cpp_namespace = '::%s::' % (spec.base_type.pkg_name)
cpp_class = '%s_' % spec.base_type.type
cpp_full_name = '%s%s' % (cpp_namespace, cpp_class)
cpp_full_name_with_alloc = '%s<ContainerAllocator>' % (cpp_full_name)
}@

#ifndef __@(spec.base_type.pkg_name)__@(spec.base_type.type)_Struct__h__
#define __@(spec.base_type.pkg_name)__@(spec.base_type.type)_Struct__h__

@##############################
@# Generic Includes
@##############################

#include <array>
#include <memory>
#include <string>
#include <vector>

@##############################
@# Includes for dependencies
@##############################
@{
for field in spec.fields:
    if not field.type.is_primitive_type():
        print('#include <%s/%s.h>' % (field.type.pkg_name, field.type.type))
}@

namespace @(spec.base_type.pkg_name)
{

template<class ContainerAllocator>
struct @(spec.base_type.type)_
{
  typedef @(spec.base_type.type)_<ContainerAllocator> Type;

@# constructors (with and without allocator)
@[for (alloc_type, alloc_name) in [['', ''], ['const ContainerAllocator& ', '_alloc']]]@
  @(spec.base_type.type)_(@(alloc_type + alloc_name))
@# generate initializer lists
@{
op = ':'
for field in spec.fields:
    # dynamic arrays require allocator if available
    if alloc_name and field.type.is_array and \
            (field.type.array_size is None or field.type.is_upper_bound):
        print('  %s %s(%s)' % (op, field.name, alloc_name))
        op = ','

    # if default value is available set it in initializer list
    elif field.type.is_primitive_type() and field.default_value is not None:
        cpp_value = value_to_cpp(field.type, field.default_value)
        print('  %s %s(%s)' % (op, field.name, cpp_value))
        op = ','
}@
  {
@# generate constructor body
@{
for field in spec.fields:
    # default values of dynamic arrays with allocators if available
    if alloc_name and field.type.is_array and \
            (field.type.array_size is None or field.type.is_upper_bound) and \
            field.type.is_primitive_type() and field.default_value is not None:
        cpp_value = value_to_cpp(field.type, field.default_value)
        print('    %s = %s;' % (field.name, cpp_value))
}@
  }
@[end for]

@[for field in spec.fields]
  typedef @(msg_type_to_cpp(field.type)) _@(field.name)_type;
  _@(field.name)_type @(field.name);
@[end for]

@# Constants
@[for constant in spec.constants]@
@[if (constant.primitive_type in ['byte', 'int8', 'int16', 'int32', 'int64', 'char'])]@
  enum { @(constant.name) = @(int(constant.value)) };
@[elif (constant.primitive_type in ['uint8', 'uint16', 'uint32', 'uint64'])]@
  enum { @(constant.name) = @(int(constant.value))u };
@[else]@
  static const @(MSG_TYPE_TO_CPP[constant.primitive_type]) @(constant.name);
@[end if]@
@[end for]@

@# Shared pointer typedefs
  typedef std::shared_ptr< @(cpp_full_name)<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< @(cpp_full_name)<ContainerAllocator> const> ConstPtr;

}; // struct @(cpp_class)

@# Typedef of template instance using std::allocator
typedef @(cpp_full_name)<std::allocator<void> > @(spec.base_type.type);

@# Shared pointer typedefs
typedef std::shared_ptr< @(cpp_namespace + spec.base_type.type) > @(spec.base_type.type)Ptr;
typedef std::shared_ptr< @(cpp_namespace + spec.base_type.type) const> @(spec.base_type.type)ConstPtr;

// constants requiring out of line definition
@[for c in spec.constants]@
@[if c.primitive_type not in ['byte', 'int8', 'int16', 'int32', 'int64', 'char', 'uint8', 'uint16', 'uint32', 'uint64']]@
template<typename ContainerAllocator> const @(MSG_TYPE_TO_CPP[c.primitive_type])
@(spec.base_type.type)_<ContainerAllocator>::@(c.name) =
@[if c.primitive_type == 'string']@
  "@(escape_string(c.value))";
@[elif c.primitive_type == 'bool']@
  @(int(c.value));
@[else]@
  @(c.value);
@[end if]@
@[end if]@
@[end for]@

@# End of namespace
}  // namespace @(spec.base_type.pkg_name)

#endif  // __@(spec.base_type.pkg_name)__@(spec.base_type.type)_Struct__h__
